You're experiencing cascading database issues because you're managing schema changes manually without proper structure. The foreign key constraint error suggests you're trying to insert data that references non-existent records.
Holistic Solutions
1. Implement Proper Database Migrations
Instead of ad-hoc table creation and ALTER statements:

Create numbered migration files (001_initial_schema.sql, 002_add_marketplace.sql, etc.)
Track which migrations have been applied
Never modify existing migrations, only add new ones
This prevents the "column may already exist" issues you're seeing

2. Schema-First Development

Define your complete database schema upfront using Drizzle schema files
Use TypeScript interfaces that match your database schema exactly
This prevents column mismatch errors between your code and database

3. Data Integrity Strategy
For the foreign key constraint error:

Create a dependency graph of your tables
Seed data in the correct order (referenced tables first)
Use transactions for all seeding operations
Add data validation before insertion

4. Environment Management

Use different databases for development/testing/production
Implement a "reset database" command for development
Consider using Docker containers for consistent database environments

5. Systematic Error Handling

Implement proper error handling for each database operation
Add rollback mechanisms for failed operations
Use database transactions for related operations
Log detailed information about what's happening at each step

6. Development Workflow

Create a database setup script that can rebuild everything from scratch
Use seed data files (JSON/CSV) instead of hardcoded data
Implement database health checks
Add database version tracking

7. Long-term Architecture

Consider using a proper ORM/query builder consistently
Implement database connection pooling
Add database performance monitoring
Create backup and recovery procedures

Immediate Action Plan

Stop the current approach - Don't keep adding ALTER statements
Create a clean schema file - Define all tables properly from the start
Build a migration system - Even a simple one to track changes
Fix the foreign key issue - Identify which table/record is missing
Implement proper seeding order - Ensure referenced records exist first

Prevention Strategy

Always test database operations in isolation first
Use database transactions for multi-step operations
Implement automated testing for your database layer
Document your database schema and relationships
Regular database backups during development