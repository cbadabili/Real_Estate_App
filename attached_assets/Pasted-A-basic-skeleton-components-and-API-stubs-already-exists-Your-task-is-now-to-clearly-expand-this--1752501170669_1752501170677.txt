A basic skeleton (components and API stubs) already exists. Your task is now to clearly expand this skeleton to integrate key Marketplace functionalities clearly described below.

üìå Marketplace Feature Overview
Sub-Navigation Sections:

üè† Find a Pro: Professional services (lawyers, valuation experts, conveyancers, insurance providers, architects, etc.)

üß± Find a Supplier: Building materials suppliers (hardware stores, concrete providers, timber suppliers, etc.)

üî® Find a Trade: Skilled labor (builders, electricians, plumbers, landscapers, surveyors, etc.)

üéì Find a Course: Training and upskilling courses for real estate and construction industries (property valuation, conveyancing, construction skills, etc.)

üìå Deliverables (Components and Backend APIs)
Clearly expand and enhance the existing React component (Marketplace.jsx) and backend API routes (routes/api.js) as follows:

‚úÖ React Frontend Components
Marketplace.jsx (main entry-point)

Already includes state management, fetching, and rendering logic.

Ensure each navigation option clearly highlights the selected category with active states.

SectionContent.jsx

Already handles category grids and featured services clearly.

Clearly ensure category cards and service cards are visually clear, responsive, and interactive.

ServiceCard.jsx

Clearly structured cards showing business details, ratings, reviews, pricing, and contact/profile buttons.

Clearly implement responsive, mobile-friendly UI (Tailwind CSS).

Provider Registration Form (RegisterProvider.jsx)

Create a new clear form component to handle provider registration with inputs clearly matching the backend requirements:

user_id, category_id, business_name, business_description, service_area, hourly_rate.

‚úÖ Backend API Endpoints
Clearly define API routes clearly under /api:

Fetch Categories: /api/categories?section={section}

Clearly returns categories with id, name, description, icon_url, and service_count.

Fetch Services: /api/services?section={section}&category={category}&limit={limit}

Clearly returns top-rated and verified services for each category/section with business details and ratings.

Register New Service Provider: /api/register-provider

POST route clearly handling new provider registrations.

Clearly performs input validation before saving clearly defined fields:

user_id, category_id, business_name, business_description, service_area, hourly_rate.

‚úÖ Suggested Database Schema (PostgreSQL via Prisma or plain SQL)
Clearly include tables/fields for:

sql
Copy
-- Service Categories
CREATE TABLE service_categories (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  icon_url TEXT,
  marketplace_section VARCHAR(50),
  is_active BOOLEAN DEFAULT true
);

-- Service Providers
CREATE TABLE service_providers (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  category_id INTEGER REFERENCES service_categories(id),
  business_name VARCHAR(255),
  business_description TEXT,
  service_area TEXT,
  hourly_rate DECIMAL(10,2),
  rating_average DECIMAL(2,1) DEFAULT 0,
  total_reviews INTEGER DEFAULT 0,
  is_verified BOOLEAN DEFAULT false,
  profile_image TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);
üìå Phase 1 Testing & QA Checklist
Clearly ensure your code meets the following criteria:

 Marketplace navigation loads clearly for all sections (Pro, Supplier, Trade, Course).

 Categories and featured services clearly load via API.

 Provider registration form clearly validates and submits data correctly.

 Clearly ensure database migrations are error-free and accurately structured.

 Clearly verify no regressions: existing functionality (login, user profiles) remain fully operational.

 Clearly perform comprehensive cross-device testing: responsive on mobile, tablet, desktop.

üìå Documentation & README Updates
Clearly provide brief documentation covering:

Marketplace feature overview clearly.

How frontend components & backend API integrate.

Quick-start instructions clearly for local setup, migrations, and testing.

Clearly add ‚ÄúTODO:‚Äù comments clearly marking areas needing future implementation, logic integration, or validation.

