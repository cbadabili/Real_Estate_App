import React, { useState, useEffect } from 'react';

// Test data that WILL show immediately
const TEST_PROPERTIES = [
  {
    id: '1',
    title: 'Modern House in Central Gaborone',
    latitude: -24.6282,
    longitude: 25.9231,
    price: 750000,
    propertyType: 'house',
    address: 'Plot 123, Central Gaborone'
  },
  {
    id: '2', 
    title: 'Residential Plot in Block 8',
    latitude: -24.6400,
    longitude: 25.9100,
    price: 250000,
    propertyType: 'land_plot',
    address: 'Plot 456, Block 8'
  },
  {
    id: '3',
    title: 'Apartment in Mogoditshane', 
    latitude: -24.6200,
    longitude: 25.8900,
    price: 450000,
    propertyType: 'apartment',
    address: 'Plot 789, Mogoditshane'
  }
];

interface Property {
  id: string;
  title: string;
  latitude: number;
  longitude: number;
  price: number;
  propertyType: string;
  address: string;
}

interface PropertyMapProps {
  properties?: Property[];
  height?: string;
  showPropertyList?: boolean;
}

export const PropertyMap: React.FC<PropertyMapProps> = ({ 
  properties: propProperties,
  height = '500px',
  showPropertyList = true 
}) => {
  const [properties, setProperties] = useState<Property[]>(TEST_PROPERTIES);
  const [loading, setLoading] = useState(false);

  // Try to fetch real properties, fall back to test data
  useEffect(() => {
    if (propProperties) {
      setProperties(propProperties);
      return;
    }

    setLoading(true);
    fetch('/api/properties')
      .then(res => res.json())
      .then(data => {
        console.log('üìä Fetched properties:', data);
        // Use real data if it has coordinates, otherwise use test data
        const validProperties = (data || []).filter((p: any) => p.latitude && p.longitude);
        setProperties(validProperties.length > 0 ? validProperties : TEST_PROPERTIES);
      })
      .catch(error => {
        console.log('‚ö†Ô∏è Using test data due to fetch error:', error);
        setProperties(TEST_PROPERTIES);
      })
      .finally(() => setLoading(false));
  }, [propProperties]);

  const getPropertyIcon = (type: string) => {
    switch (type) {
      case 'house': return 'üè†';
      case 'apartment': return 'üè¢';
      case 'land_plot': return 'üèûÔ∏è';
      case 'commercial': return 'üè™';
      default: return 'üìç';
    }
  };

  const formatPrice = (price: number) => {
    if (price >= 1000000) {
      return `P${(price / 1000000).toFixed(1)}M`;
    } else if (price >= 1000) {
      return `P${(price / 1000).toFixed(0)}k`;
    }
    return `P${price.toLocaleString()}`;
  };

  if (loading) {
    return (
      <div style={{ 
        height, 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center',
        background: '#f5f5f5',
        borderRadius: '8px'
      }}>
        <div>Loading map...</div>
      </div>
    );
  }

  return (
    <div style={{ height, width: '100%', position: 'relative' }}>
      {/* Embedded Google Map centered on Gaborone */}
      <iframe
        src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d29515.845944744992!2d25.9!3d-24.63!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x1ebac20d1de96c07%3A0x8b3e3c5b8a5c5f9e!2sGaborone%2C%20Botswana!5e0!3m2!1sen!2sus!4v1642678901234!5m2!1sen!2sus"
        width="100%"
        height="100%"
        style={{ border: 0, borderRadius: '8px' }}
        allowFullScreen
        loading="lazy"
        referrerPolicy="no-referrer-when-downgrade"
      />
      
      {/* Properties count overlay */}
      <div style={{
        position: 'absolute',
        top: '15px',
        left: '15px',
        background: 'white',
        padding: '10px 15px',
        borderRadius: '8px',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
        zIndex: 1000,
        fontSize: '14px',
        fontWeight: '600'
      }}>
        üè† {properties.length} properties found
      </div>
      
      {/* Property list overlay */}
      {showPropertyList && (
        <div style={{
          position: 'absolute',
          top: '15px',
          right: '15px',
          background: 'white',
          padding: '15px',
          borderRadius: '8px',
          boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
          maxWidth: '280px',
          maxHeight: '400px',
          overflowY: 'auto',
          zIndex: 1000
        }}>
          <h4 style={{ 
            margin: '0 0 12px 0', 
            fontSize: '16px',
            color: '#333'
          }}>
            Properties in Gaborone
          </h4>
          
          {properties.map(property => (
            <div 
              key={property.id} 
              style={{ 
                marginBottom: '10px', 
                fontSize: '12px',
                padding: '10px',
                background: '#f8f9fa',
                borderRadius: '6px',
                border: '1px solid #e9ecef',
                cursor: 'pointer',
                transition: 'all 0.2s'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.background = '#e9ecef';
                e.currentTarget.style.transform = 'translateY(-1px)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.background = '#f8f9fa';
                e.currentTarget.style.transform = 'translateY(0)';
              }}
            >
              <div style={{ 
                fontWeight: '600', 
                marginBottom: '4px',
                color: '#333',
                display: 'flex',
                alignItems: 'center',
                gap: '5px'
              }}>
                {getPropertyIcon(property.propertyType)}
                {property.title}
              </div>
              
              <div style={{ 
                color: '#666', 
                marginBottom: '4px',
                fontSize: '11px'
              }}>
                üìç {property.address}
              </div>
              
              <div style={{ 
                color: '#007bff', 
                fontWeight: '600',
                fontSize: '13px'
              }}>
                üí∞ {formatPrice(property.price)}
              </div>
            </div>
          ))}
          
          {properties.length === 0 && (
            <div style={{ 
              textAlign: 'center', 
              color: '#666',
              fontSize: '12px',
              padding: '20px'
            }}>
              No properties found
            </div>
          )}
        </div>
      )}
      
      {/* Map controls overlay */}
      <div style={{
        position: 'absolute',
        bottom: '15px',
        left: '15px',
        background: 'white',
        padding: '8px 12px',
        borderRadius: '6px',
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
        zIndex: 1000,
        fontSize: '11px',
        color: '#666'
      }}>
        üó∫Ô∏è Interactive map view ‚Ä¢ Click properties for details
      </div>
    </div>
  );
};

// Default export for easy importing
export default PropertyMap;