Got it — you want three things to “just work”:

Clicking Search actually runs a search

Hitting Enter runs a search

Clicking a recent search or AI suggestion both fills the box and runs a search

Below is a drop-in SmartSearchBar that does all three (with localStorage recents, AI suggestions, keyboard nav, and the portalized dropdown so it never hides behind other UI).

1) SmartSearchBar (drop-in)
// client/src/components/search/SmartSearchBar.tsx
import { useEffect, useMemo, useRef, useState } from "react";
import { createPortal } from "react-dom";

type Props = {
  onSearch: (q: string) => void;
  initial?: string;
  // Optional: provide your AI suggestor (return plain strings)
  suggest?: (q: string) => Promise<string[]>;
};

const RECENTS_KEY = "beedab_recent_searches";
const MAX_RECENTS = 10;

function loadRecents(): string[] {
  try {
    const v = localStorage.getItem(RECENTS_KEY);
    return v ? JSON.parse(v) : [];
  } catch {
    return [];
  }
}
function saveRecent(q: string) {
  const prev = loadRecents().filter((x) => x.toLowerCase() !== q.toLowerCase());
  const next = [q, ...prev].slice(0, MAX_RECENTS);
  localStorage.setItem(RECENTS_KEY, JSON.stringify(next));
}

export default function SmartSearchBar({ onSearch, initial = "", suggest }: Props) {
  const anchorRef = useRef<HTMLDivElement | null>(null); // ✅ object ref, not constructor
  const inputRef  = useRef<HTMLInputElement | null>(null);

  const [q, setQ] = useState(initial);
  const [open, setOpen] = useState(false);
  const [rect, setRect] = useState<DOMRect | null>(null);
  const [ai, setAi] = useState<string[]>([]);
  const [recents, setRecents] = useState<string[]>(loadRecents());
  const [highlight, setHighlight] = useState<number>(-1); // keyboard nav index

  // Positioning for portal
  useEffect(() => {
    if (!open) return;
    const update = () => {
      const el = anchorRef.current;
      if (el) setRect(el.getBoundingClientRect());
    };
    update();
    const ro = new ResizeObserver(update);
    if (anchorRef.current) ro.observe(anchorRef.current);
    window.addEventListener("scroll", update, true);
    window.addEventListener("resize", update);
    return () => {
      ro.disconnect();
      window.removeEventListener("scroll", update, true);
      window.removeEventListener("resize", update);
    };
  }, [open]);

  // Debounced AI suggestions
  useEffect(() => {
    if (!suggest) return;
    if (!open) return;
    const term = q.trim();
    if (!term) { setAi([]); return; }
    const t = setTimeout(async () => {
      try {
        const list = await suggest(term);
        setAi(Array.isArray(list) ? list : []);
        setHighlight(list.length ? 0 : -1);
      } catch {
        setAi([]);
      }
    }, 250);
    return () => clearTimeout(t);
  }, [q, open, suggest]);

  // Close on outside click
  useEffect(() => {
    const onDoc = (e: MouseEvent) => {
      if (!anchorRef.current) return;
      if (!anchorRef.current.contains(e.target as Node)) setOpen(false);
    };
    if (open) document.addEventListener("mousedown", onDoc);
    return () => document.removeEventListener("mousedown", onDoc);
  }, [open]);

  const visibleList = useMemo(() => {
    // If there is a query, show AI suggestions; otherwise show recent searches
    const term = q.trim();
    return term ? ai : recents;
  }, [q, ai, recents]);

  function doSearch(term: string) {
    const value = term.trim();
    if (!value) return;
    saveRecent(value);
    setRecents(loadRecents());
    onSearch(value);
    setOpen(false);
    setHighlight(-1);
  }

  function onSubmit(e?: React.FormEvent) {
    e?.preventDefault();
    doSearch(q);
  }

  function onPick(item: string) {
    // prevent input blur before click handler
    setQ(item);
    doSearch(item);
  }

  function onKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {
    if (!open && (e.key === "ArrowDown" || e.key === "ArrowUp")) {
      setOpen(true);
      return;
    }
    if (!visibleList.length) return;

    if (e.key === "ArrowDown") {
      e.preventDefault();
      setHighlight((i) => Math.min(i + 1, visibleList.length - 1));
    } else if (e.key === "ArrowUp") {
      e.preventDefault();
      setHighlight((i) => Math.max(i - 1, 0));
    } else if (e.key === "Enter") {
      if (highlight >= 0) {
        e.preventDefault();
        onPick(visibleList[highlight]);
      } else {
        onSubmit(e);
      }
    } else if (e.key === "Escape") {
      setOpen(false);
    }
  }

  return (
    <div ref={anchorRef} className="relative w-full">
      <form onSubmit={onSubmit} className="flex items-center gap-2">
        <input
          ref={inputRef}
          value={q}
          onChange={(e) => setQ(e.target.value)}
          onFocus={() => setOpen(true)}
          onKeyDown={onKeyDown}
          placeholder="Search properties in Botswana…"
          className="w-full rounded-lg border px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <button
          type="submit"
          className="rounded-md bg-beedab-blue px-4 py-2 text-white hover:brightness-110"
        >
          Search
        </button>
      </form>

      {/* Portal dropdown */}
      {open && rect && createPortal(
        <div
          style={{
            position: "fixed",
            top: rect.bottom + 4,
            left: rect.left,
            width: rect.width,
            zIndex: 2147483647,
          }}
          className="max-h-80 overflow-auto rounded-md border bg-white shadow-xl dark:bg-slate-900"
        >
          <div className="px-3 py-2 text-xs uppercase tracking-wide text-slate-500">
            {q.trim() ? "Suggestions" : "Recent searches"}
          </div>

          {(visibleList.length === 0) ? (
            <div className="px-3 py-2 text-sm opacity-60">No suggestions</div>
          ) : visibleList.map((item, idx) => (
            <button
              key={`${item}-${idx}`}
              className={`block w-full px-3 py-2 text-left hover:bg-slate-100 dark:hover:bg-slate-800 ${
                idx === highlight ? "bg-slate-100 dark:bg-slate-800" : ""
              }`}
              onMouseDown={(e) => e.preventDefault()} // keep focus
              onClick={() => onPick(item)}
            >
              {item}
            </button>
          ))}
        </div>,
        document.body
      )}
    </div>
  );
}


Why this fixes your issues

Search button is inside a <form onSubmit> → submit triggers doSearch(q) → parent refetches.

Enter key triggers the same submit, or selects the highlighted suggestion.

Clicking a suggestion / recent calls onPick → sets input, saves to recents, runs search.

2) Wire it up on the page

Make the page’s query state drive TanStack Query (so changing q refetches), and pass a suggestor that calls your AI endpoint.

// client/src/pages/PropertiesPage.tsx
import SmartSearchBar from "@/components/search/SmartSearchBar";
import { useQuery } from "@tanstack/react-query";
import { useState } from "react";

async function fetchSuggestions(q: string): Promise<string[]> {
  const r = await fetch(`/api/suggest?q=${encodeURIComponent(q)}`, {
    headers: { Accept: "application/json" }
  });
  if (!r.ok) return [];
  const data = await r.json();
  return Array.isArray(data) ? data : (data.suggestions ?? []);
}

export default function PropertiesPage() {
  const [filters, setFilters] = useState({ q: "", sort: "newest" });

  const { data, isLoading, isError } = useQuery({
    queryKey: ["search", filters],          // include q so it refetches
    queryFn: async () => {
      const params = new URLSearchParams();
      if (filters.q) params.set("q", filters.q);
      if (filters.sort) params.set("sort", filters.sort);
      const r = await fetch(`/api/search?${params.toString()}`, {
        headers: { Accept: "application/json" }
      });
      if (!r.ok) throw new Error(await r.text());
      const { items } = await r.json();
      return items;
    }
  });

  return (
    <div className="space-y-4">
      <SmartSearchBar
        initial={filters.q}
        onSearch={(q) => setFilters((f) => ({ ...f, q }))}
        suggest={fetchSuggestions}
      />

      {/* render results... */}
    </div>
  );
}

3) Minimal suggest endpoint (server)

If you don’t have one yet, add a simple /api/suggest that asks your RealEstateIntel AI GPT (or falls back to local heuristics).

// server/suggest.ts (wire in your routes)
import type { Request, Response } from "express";
import fetch from "node-fetch";

const INTEL_SUGGEST_URL = process.env.REALESTATEINTEL_SUGGEST_URL!;
const INTEL_KEY = process.env.REALESTATEINTEL_API_KEY!;

export async function suggest(req: Request, res: Response) {
  const q = String(req.query.q || "").trim();
  if (!q) return res.json([]);

  try {
    // call your AI suggestor
    const r = await fetch(INTEL_SUGGEST_URL, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${INTEL_KEY}`,
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify({ query: q, market: "BW", max: 8 }),
    });
    if (!r.ok) throw new Error(`intel ${r.status}`);
    const data = await r.json();

    // Expect either array<string> or { suggestions: string[] }
    const list = Array.isArray(data) ? data : (data.suggestions ?? []);
    return res.json(list.slice(0, 8));
  } catch {
    // fallback suggestions if AI is down
    const pool = ["Gaborone", "Francistown", "Phakalane", "Mogoditshane", "Lobatse", "Tlokweng"];
    const term = q.toLowerCase();
    const list = pool.filter(s => s.toLowerCase().includes(term));
    return res.json(list.slice(0, 8));
  }
}


And mount it:

// server/index.ts
import { suggest } from "./suggest";
app.get("/api/suggest", suggest);

Quick verification

Type → dropdown shows AI suggestions; click one → input fills and results update.

Hit Enter → results update.

Click Search → results update.

Clear input → open the box → you’ll see Recent searches; click one → it searches.

If Search “toggles” but no network request: make sure your useQuery queryKey includes filters.q and you call setFilters({...f, q}) from onSearch.

If you want me to tailor this to your exact files (filenames/paths differ), tell me the component path where SmartSearchBar is rendered and I’ll adjust the imports and props for your repo structure.

ChatGPT can make mistakes. Ch