You’ve got schema drift between what the code expects and what’s actually in Postgres.

What the errors are telling us

Seeding service_categories fails because the code selects a column that doesn’t exist:

column "updated_at" does not exist  (table: service_categories)


Fetching properties fails because the code selects a geom column that doesn’t exist on properties:

column "geom" does not exist  (table: properties)


So your Drizzle schema / queries include service_categories.updated_at and properties.geom, but your DB doesn’t have them (likely after partial migration squash or a missed migration).

Fastest path to green
1) Confirm current DB shape (optional but useful)
-- Which migrations ran?
SELECT * FROM drizzle_migrations ORDER BY created_at;

-- Do these columns exist?
SELECT column_name FROM information_schema.columns
WHERE table_name='service_categories';

SELECT column_name FROM information_schema.columns
WHERE table_name='properties';

2) Create a new migration to align DB → code

Create drizzle/014_fix_schema_drift.sql (name can be next in your sequence):

BEGIN;

-- If you actually want to keep 'geom' (recommended for map search):
-- You’ll need PostGIS for geometry(Point,4326)
CREATE EXTENSION IF NOT EXISTS postgis;

-- service_categories: add updated_at if missing
ALTER TABLE service_categories
  ADD COLUMN IF NOT EXISTS updated_at timestamptz NOT NULL DEFAULT now();

-- optional: keep updated_at fresh automatically
CREATE OR REPLACE FUNCTION set_updated_at() RETURNS trigger AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END; $$ LANGUAGE plpgsql;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'set_service_categories_updated_at'
  ) THEN
    CREATE TRIGGER set_service_categories_updated_at
    BEFORE UPDATE ON service_categories
    FOR EACH ROW EXECUTE FUNCTION set_updated_at();
  END IF;
END $$;

-- properties: add geom (Point, WGS84) if missing
ALTER TABLE properties
  ADD COLUMN IF NOT EXISTS geom geometry(Point, 4326);

-- backfill geom from existing lat/lng
UPDATE properties
SET geom = ST_SetSRID(ST_MakePoint(longitude, latitude), 4326)
WHERE geom IS NULL AND longitude IS NOT NULL AND latitude IS NOT NULL;

-- optional: create spatial/text indexes if you use them
CREATE INDEX IF NOT EXISTS idx_properties_geom_gist ON properties USING GIST (geom);

-- if you maintain a full-text column (already seems to exist), keep its index
CREATE INDEX IF NOT EXISTS idx_properties_fts_gin ON properties USING GIN (fts);

COMMIT;


Run your migrations again, then start the app.

If you can’t enable PostGIS

If your Postgres doesn’t allow CREATE EXTENSION postgis (some managed/dev environments restrict it):

Option B (no PostGIS):

Remove geom from the schema/selects and use latitude/longitude only.

Replace spatial queries with bbox/range math, and add a composite index on (settlement_id, price, property_type) or on (latitude, longitude) if you filter by bounds.

Minimal quick fix (until you refactor):

In your Drizzle table for properties, drop the geom field.

In any .select() that lists columns explicitly, remove geom.

Re-run.

Why it happened (so it doesn’t again)

A previous migration/branch likely added updated_at and geom in code but the SQL never hit the DB (or was removed during a squash).

Your seeder and queries assume those columns exist → boom.

Prevention:

Keep Drizzle schema and migrations in lockstep.

Add a CI job that:

Boots a clean Postgres

Runs all migrations

Executes a smoke select on each table using your Drizzle models (catches missing columns early).

After it’s fixed

Re-run seed: it should pass service_categories.

/api/properties should return 200 (not 500).

That Browserslist warning is harmless; update when convenient: