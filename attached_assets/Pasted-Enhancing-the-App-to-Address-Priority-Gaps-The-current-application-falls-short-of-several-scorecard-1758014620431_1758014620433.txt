Enhancing the App to Address Priority Gaps

The current application falls short of several scorecard requirements, leaving gaps in search functionality, user experience, compliance, and more. Below is a comprehensive plan to enhance the app by tackling key priority areas, each with the identified issue and the recommended solution:

Priority Area	Identified Gap	Suggested Enhancement
1. Search & Discovery	No autocomplete or typo tolerance in search queries	Implement typeahead suggestions (typo-tolerant autocomplete)
2. Filters & Map Tools	Flat filters (no district→town→ward hierarchy) and no map drawing tool	Add hierarchical location filters and map shape drawing feature
3. Saved Search Alerts	Saved searches only in local storage; “alerts” toggle does nothing	Persist saved searches on backend and enable notification alerts
4. Analytics Tracking	No event tracking for key actions (search, views, etc.)	Instrument analytics events (e.g. search_performed, pdp_viewed)
5. Property Details & Booking	No dedicated Property Detail Page (PDP); booking via internal API only	Create a PDP and add WhatsApp deep-link for booking/viewing
6. Shortlist & Comparison	No favorites/shortlist to drive compare functionality	Implement user shortlist (favorites) and comparison workflow
7. Security (KYC & Media)	No user verification (KYC) or image protection (watermarking)	Introduce KYC checks and watermark listing photos
8. Local Calculators	Only a mortgage calculator (no transfer duty or bond tools)	Add transfer-duty and bond calculators (Botswana-specific)
9. Privacy & Consent	No Privacy Policy page or cookie consent banner	Add a Privacy Policy and implement cookie consent
10. SEO Enhancements	No structured data or sitemap for SEO	Add Schema.org markup and generate XML sitemaps

Each of these areas is detailed below with the issues and proposed improvements to guide development:

1. Search & Discovery – Add Autocomplete Suggestions

Gap: The search feature currently sends raw queries to the backend (/api/search/ai) with no autocomplete suggestions or typo correction. Users must type full terms exactly, which leads to a poor search experience and potential missed results.

Proposed Solution: Integrate a typeahead autocomplete that provides real-time, typo-tolerant suggestions as the user types. This will utilize the backend’s suggestions endpoint (already available but unused). Autocomplete suggestions are now considered a standard component of a “good” search interface
nngroup.com
. By implementing this, users can select relevant query completions, avoiding typos and reducing effort
nngroup.com
. The suggestions list should update with each keystroke and highlight matching text (following UX best practices for search autosuggest).

Implementation Notes:

Use the existing suggestions API to fetch recommendations on each input change (with debouncing to limit calls). Include fuzzy matching so minor spelling errors still return relevant suggestions.

Display suggestion dropdown under the search box, styled clearly to differentiate user-typed text vs. suggested completion
nngroup.com
.

Ensure selecting a suggestion triggers a search. If the user presses Enter without picking a suggestion, perform a normal search with their query.

Test that suggestions always yield useful results; do not suggest queries that would return no or poor results (as this can frustrate users
nngroup.com
).

By adding autocomplete, the app will deliver a more modern and user-friendly search experience, helping users find properties faster and with fewer errors.

2. Filters & Map Tools – Hierarchical Location Filters and Draw-on-Map

Gap: The filtering UI is limited and not hierarchical. Users cannot filter by a district then narrow to a town and ward – all location filters are flat, which is unwieldy for a country-wide search. Additionally, the map view only shows property markers; it lacks tools like drawing a radius or polygon to define a custom area.

Proposed Solution: Introduce hierarchical location filters (e.g. cascading dropdowns for District → Town → Ward) and add interactive “draw on map” functionality for spatial search. Hierarchical filters let users drill down to specific areas easily, improving search precision. The draw-on-map tool allows outlining a custom boundary on the map to find properties within that shape, a feature common in leading real estate apps
recime.app
.

Implementation Notes:

Hierarchical Filters: Update the filter sidebar to populate towns based on selected district, and wards based on selected town. This could be done via static JSON of Botswana administrative divisions or an API. For example, when a user selects Gaborone District, load its towns (e.g. Gaborone City, Mogoditshane, etc.), then their wards. This ensures users don’t have to sift through an unorganized list of locations.

Map Drawing Tool: Add a “Draw Area” button on the map view. On click, allow the user to draw a polygon or circle on the map. Once drawn, filter the property results to those within that shape. Many property search platforms let users create custom boundaries on the map
recime.app
, as this is very useful for targeting specific neighborhoods or corridors not defined by one admin region.

Provide options to edit or clear the drawn shape. Also, update the URL or search state so that sharing the search can reproduce the drawn area filter.

These enhancements make the search more powerful: users can combine precise location filtering with interactive map boundaries to zero in on the exact areas they’re interested in. This is especially important for usability in real estate search, where location is a prime factor.

3. Saved Search Alerts – Persistent Saved Searches with Notifications

Gap: The app allows saving searches, but currently this is only stored in the browser’s local storage. There is a UI toggle for “alerts”, but it doesn’t actually trigger any notifications. If the user clears their cache or switches devices, their saved searches and any alert preferences are lost, and no emails or push notifications are sent for new listings.

Proposed Solution: Persist saved searches on the server tied to user accounts and enable alert notifications (email or push) when new properties match those searches. This brings the feature on par with user expectations: saved search alerts keep users engaged by informing them of new listings without requiring manual checks
algolia.com
.

Implementation Notes:

Backend Persistence: Create API endpoints to save a user’s search criteria (query + filters) in the database. Include a flag for alert preference. When a logged-in user saves a search, send this data to the backend rather than local storage only.

Notification System: Implement a scheduled job that periodically checks for new or updated listings that match saved searches. When a match is found, send out notifications. For example, use a cron job or serverless function to run these queries every X hours. On finding new matches, send an email to the user (and/or an app push notification if supported).

Use third-party services if needed (e.g. an email service or Firebase Cloud Messaging for push). The Algolia example shows using email/SMS providers like Twilio SendGrid for alerts
algolia.com
. Start with email alerts containing a summary and link to the new property.

Frontend: Indicate on the UI that alerts are active. Provide a way for users to manage their saved searches (view, unsubscribe from alerts, delete search) in their account profile.

By persisting saved searches and sending alerts, users will stay engaged and won’t miss out on new properties. This feature is common on real estate platforms because it automates repetitive searches and keeps users up-to-date with changing inventory
algolia.com
.

4. Analytics Tracking – Instrument Key Events

Gap: The codebase lacks instrumentation for analytics events that were specified in requirements (e.g. events like search_performed, pdp_viewed, etc., are not emitted anywhere in the code). This means user interactions are not being measured, making it impossible to gather insights on user behavior or app performance relative to KPIs.

Proposed Solution: Instrument analytics events throughout the app to track important user actions and flows. By capturing events such as searches executed, property detail views, contact clicks, etc., the team can analyze usage patterns and funnel metrics, which are crucial for improving the product
countly.com
.

Implementation Notes:

Decide on an analytics solution (e.g. Google Analytics 4, Mixpanel, or a self-hosted solution). Integrate its SDK or API into the app.

Define a clear list of events to track. At minimum include:

Search Performed: when a user submits a search (with details like query, filters, number of results).

Listing Viewed (PDP Viewed): when a user opens a Property Detail Page.

Contact Initiated: when user clicks to call or message (WhatsApp) an agent.

Saved Search Created and Property Favorited: track engagement with new features above.

Any conversion events (if applicable, like booking a viewing or submitting an application).

Implement event calls in the relevant components (for instance, after the search API returns results, log a search_performed event with the query and count of results; on mounting the PDP component, log a pdp_viewed with property ID).

Ensure to not degrade UX – use non-blocking calls or batch reporting. Most analytics SDKs handle this asynchronously.

Establish naming conventions for events and consistent schema for event properties, so data stays organized (e.g., use snake_case like pdp_viewed, with properties like property_id, user_id, timestamp, etc.).

Adding robust event tracking will provide deep insights into how users interact with the app, which is “pivotal for enhancing user experience and driving growth”
countly.com
. It enables data-driven decisions (for example, if analytics show very few users click “Save Search,” the UI for that might need improvement).

5. Property Details & Booking – Create PDP with WhatsApp Integration

Gap: The application currently doesn’t have a dedicated Property Detail Page (PDP) – it only has a search results page under client/src/pages/property. There’s no rich page showing full details of a listing. Additionally, booking a viewing is handled via an internal appointment API with no option to contact via WhatsApp. Given WhatsApp’s popularity for communications, not having a quick link for inquiries is a usability miss.

Proposed Solution: Develop a PDP for each property listing and integrate a “Contact via WhatsApp” feature for booking inquiries. The PDP will greatly enhance the user experience by providing all details (photos, description, price, amenities, agent info, etc.) in one place, and the WhatsApp deep-link allows users to seamlessly message the agent or booking line.

Implementation Notes:

Build the PDP: Create a new route/component for property details (e.g. /property/{id}). This page should fetch the property data by ID (likely via an API endpoint) and display:

Image gallery or main photo,

Price, address, and key details (beds, baths, area, etc.),

Description text,

Agent or seller contact info.

A “Book a Viewing” section.

WhatsApp Booking Link: In the booking section, provide a button like “Contact on WhatsApp”. This should be a deep link that opens WhatsApp with a pre-filled message. For example, use the official URL https://wa.me/<phone>?text=<URL-encoded message> which, when clicked, launches WhatsApp chat to the specified number
wanotifier.com
. The message could include the property reference (“Hello, I am interested in [Property XYZ]. I'd like to schedule a viewing.”).

Ensure the agent’s WhatsApp number is stored or configurable (perhaps part of the agent’s profile or listing data).

As a fallback, also provide a normal “Call” or email contact option for users without WhatsApp.

Connect with Existing Booking API: If there’s an internal appointments API, the PDP’s booking request (whether initiated via WhatsApp or a form) should also trigger that API for record-keeping. For instance, if a user clicks “Request Viewing” (non-WhatsApp method), schedule it through the API and send confirmation.

UI/UX considerations: Make the WhatsApp button prominent (using WhatsApp’s green color and icon to be recognizable). Many users prefer messaging to phone calls, so this could improve conversion. Clearly indicate if the number is for WhatsApp only and if standard messaging rates apply (if relevant).

By implementing a PDP with rich information and a convenient WhatsApp contact option, users will have a smoother journey from browsing to inquiring. This meets the expectation of being able to easily reach out about a property using familiar communication tools.

6. Shortlist & Comparison – Favorites and Compare Feature

Gap: There is no mechanism for users to save favorite properties (shortlist) which means the comparison feature (which exists as a component) has no input. Users currently must remember or manually note listings to compare outside the app, which is inconvenient.

Proposed Solution: Implement a “shortlist” or favorites feature where users can mark properties they like, and build a comparison workflow that uses those saved properties. This aligns with common real estate app functionality: users expect to be able to save homes and later view them side-by-side. In fact, platforms like Realtor.com allow sharing and collaborating on favorite homes
recime.app
.

Implementation Notes:

Favorites Backend: Add an endpoint and database support for marking a listing as favorite (tied to user account). A simple table of user_id and property_id could suffice. Allow toggling (add/remove favorite).

UI Indicators: On each listing card and on the PDP, include a heart or star icon that can be clicked to favorite the property. Change the icon state (filled vs outline) depending on whether it’s already saved.

Favorites Page: Create a page or section in the user’s account for “My Shortlist” or “Saved Properties”. This would list all favorited properties with links to their PDPs.

Comparison Tool Integration: When viewing the shortlist, allow users to select 2-4 properties and click “Compare”. The comparison component would then display those properties’ details side by side (features, price, etc.). If a comparison component already exists, feed it the selected favorites. Otherwise, implement a simple comparison table showing key attributes of the chosen listings.

Consider allowing sharing of the shortlist or comparisons (for example, a user might want to send their favorites to a partner). This could be a later enhancement.

By enabling favorites, users can easily keep track of interesting listings (a major usability boost), and a comparison feature helps them make decisions by seeing differences in one view. This keeps users engaged on the platform instead of resorting to external notes or memory. As noted in a review of top apps, collaboration and sharing of favorite homes is a valued feature for multiple decision-makers
recime.app
.

7. Security Features – KYC Verification and Photo Watermarking

Gap: The application currently lacks security and fraud-prevention features. There are no Know-Your-Customer (KYC) checks during user registration or listing creation, which could lead to fake accounts or listings. Also, property images are unprotected – without watermarks, they could be stolen and reused in scams or elsewhere without permission.

Proposed Solution: Introduce a KYC verification process for users (especially sellers/agents) and automatically watermark uploaded property photos. These measures will increase trust and safety on the platform by deterring fraud.

Implementation Notes:

KYC Verification: For every new account (or at least for those who post listings), implement an identity verification step. This could range from simple (email verification and phone OTP) to advanced (uploading an ID document and a selfie, using a third-party verification service).

At minimum, require users to verify their phone number (since WhatsApp contact is used) and possibly provide a valid ID number or document if they list properties.

You might integrate a KYC service API for document verification if needed. Given that “KYC checks have become a crucial part of real estate transactions due to AML regulations”
idenfy.com
, this will also help with regulatory compliance if the platform scales.

Mark verified users or agents with a badge (“Verified”) on their listings for transparency.

Image Watermarking: When agents or sellers upload property photos, automatically overlay a faint watermark (e.g., the company logo or site name) on the images. The watermark should be semi-transparent and placed in a way that it’s visible but doesn’t obscure the image too much.

This can be done in the backend image processing pipeline. For example, using a library to add a watermark layer before saving the image.

Ensure the watermark is permanent and not easily removable (cover a portion of the image, not just the border).

Purpose: If someone tries to copy the image for a fake listing elsewhere, the watermark identifies the source. This helps prevent scammers from stealing photos to create fraudulent listings
help.nomadlease.com
.

Communicate to users why these measures exist: e.g., a note that verification is to protect against fraud, and a note that photos are watermarked for security.

Implementing KYC and watermarking will bolster the platform’s integrity and user trust. Watermarks signal that images are proprietary and discourage misuse
help.nomadlease.com
, and KYC will make it harder for bad actors to operate, aligning the app with standard safety practices in real estate.

8. Local Calculators – Add Transfer Duty and Bond Calculators

Gap: The only financial tool available is a basic mortgage calculator. The app does not provide other calculators that are relevant in Botswana, such as a transfer duty calculator (to compute the property transfer tax) or a bond affordability calculator. Users currently must figure out those costs elsewhere.

Proposed Solution: Add dedicated transfer duty and bond calculators to the platform. These tools will cater to Botswana-specific needs:

Transfer Duty Calculator: Computes the tax (transfer duty) a buyer must pay when purchasing property, based on the property value and whether the buyer is a citizen or non-citizen (Botswana has different rates by citizenship
taxsummaries.pwc.com
).

Bond Calculator: Likely an extension to the mortgage calculator – perhaps calculating the maximum loan (bond) one can afford given income, or the bond registration fees, etc., depending on common usage in the region. (In some contexts, “bond calculator” may refer to affordability or total costs of securing a home loan.)

Implementation Notes:

Transfer Duty Calc: Determine the formula from local law (for instance, if citizens pay 5% above a certain threshold, and non-citizens pay a higher rate
taxsummaries.pwc.com
). Design a simple form where user inputs property price and selects citizen vs. non-citizen, and the calculator outputs the duty payable. Include any thresholds or exemptions (e.g., first P1,000,000 exempt for citizens as per latest rules).

Bond Calculator: Clarify what exactly users need – possibly two tools:

Bond affordability: User enters income, expenses, interest rate, term -> output maximum loan they could qualify for.

Bond repayment: (This might be essentially the mortgage calculator already present, which given loan amount, interest, term, computes monthly payment).

If a “mortgage tool” already exists, perhaps by “bond calculator” they mean an additional calculation, such as bond registration costs (legal fees, etc.) or how much of a loan a user can afford. Research common calculators on competitor sites for Botswana/South Africa context.

Place these calculators in a “Tools” or “Calculators” section of the app or integrate them into the listing/PDP pages for quick reference (e.g., on a PDP, a user can plug in numbers to see estimated costs).

Ensure the calculators are accurate and up-to-date with the latest local rates and regulations. Include a disclaimer that these are estimates.

By providing transfer duty and bond calculators, the app offers a more complete suite of home-buying tools. Many leading real estate apps include such financial tools (e.g., affordability calculators, mortgage calculators) to help users plan their purchase
recime.app
recime.app
. This not only improves user experience but positions the platform as an authoritative resource for property transactions in Botswana.

9. Privacy & Consent – Add Privacy Policy and Cookie Banner

Gap: The platform currently has no Privacy Policy page and no cookie consent mechanism. This is problematic for legal compliance and user trust, especially if the app uses analytics, cookies, or plans to run any third-party integrations (which it likely does, given the above enhancements).

Proposed Solution: Create a comprehensive Privacy Policy (detailing data handling, use of cookies, third-party services, etc.) and implement a cookie consent banner. This will ensure the application adheres to privacy laws and best practices, and users are informed about their data rights.

Implementation Notes:

Privacy Policy Page: Draft a Privacy Policy outlining what data is collected (user profile info, analytics events, etc.), how it’s used, stored, and protected, and with whom it’s shared (e.g., if using Google Analytics or sending email alerts via a service, mention those). Also include compliance statements relevant to any jurisdictions (if targeting international users, mention GDPR, etc., otherwise at least cover basics of user privacy). Link this page in the website footer.

Cookie Consent Banner: If the app sets cookies or tracking (which it will once analytics are added, and possibly for session or preferences), show a cookie consent banner on first visit:

This banner should briefly state that the site uses cookies and for what (e.g., “to improve user experience and analyze traffic”), and provide a link to the Privacy Policy for details.

Include an “Accept” button (and optionally “Cookie settings” to allow opting out of certain categories if doing a full compliance approach).

Once accepted, store the consent so the banner doesn’t show again for that user unless policy changes.

Ensure this complies with applicable laws. For example, if any EU users are expected, GDPR and ePrivacy Directive rules apply (consent required before setting non-essential cookies). Even outside the EU, having this is considered good practice for transparency. Major platforms (Google, Apple, etc.) also require apps to have Privacy Policies
termsfeed.com
termsfeed.com
.

No cookies should be set prior to consent except essential ones. If using Google Analytics, configure it to respect a “do not track until consent” mode or similar.

By adding a clear Privacy Policy and consent banner, the app not only complies with legal requirements but also builds user confidence. Users appreciate knowing how their data is handled, and many jurisdictions require that websites have a Privacy Policy and display a cookie consent notice
termsfeed.com
. This update will cover those bases.

10. SEO Enhancements – Schema Markup and XML Sitemaps

Gap: The application lacks SEO optimizations such as Schema.org structured data and an XML sitemap. Without these, search engines might not fully understand or index the site content, leading to poorer visibility in search results. There’s no Schema (e.g., no use of real estate listing schema for the properties), and no sitemap means new or updated pages might be slower to get indexed.

Proposed Solution: Improve SEO by implementing structured data markup on relevant pages and generating an XML sitemap for the site. These are important for increasing search engine visibility and ensuring all pages (especially property listings) are crawled.

Implementation Notes:

Schema Markup: Use Schema.org vocabulary to mark up key entities:

For property listing pages (PDPs), use RealEstateListing schema or related types (e.g., Product or Offer schema could be alternatives, but RealEstateListing is specifically designed for this domain
seoclarity.net
). This provides search engines structured info about the listing (price, location, property type, etc.).

Also consider marking up organizational info (Organization schema for the site/agency), and if relevant, breadcrumbs, reviews, etc.

Implement as JSON-LD in the HTML head of pages. Ensure that required and recommended properties are included to be eligible for rich results.

The benefit is that schema helps Google better interpret the page content and can enable rich snippets (for example, price, address, and other details might show directly in search results)
seoclarity.net
.

XML Sitemap: Create a dynamic sitemap.xml that lists all important URLs:

Include all property pages, search pages (if useful), and main content pages (home, about, contact, etc.). Since listings update frequently, this sitemap should update when new properties are added.

If the site is small, one sitemap is fine; if very large, consider breaking into multiple (e.g., per category or per date).

Submit the sitemap to Google Search Console and others. This ensures search engines can find and index the pages more intelligently, acting as a “roadmap” of the site
positional.com
.

Additional SEO: While at it, also ensure basics like unique title tags and meta descriptions on each page. Possibly generate meta tags (og:tags, twitter cards) for better link sharing previews.

By adding structured data and a sitemap, the platform will likely rank better and get more organic traffic. Schema markup, in particular, can lead to enhanced search listings (rich snippets) making the site more attractive in search results
seoclarity.net
, and a sitemap helps search engines crawl the site efficiently
positional.com
. These SEO improvements are crucial for reaching the target audience and meeting the scorecard’s requirements for a modern, discoverable web application.

Conclusion: Implementing the above enhancements will address the identified gaps between the current codebase and the project requirements. We prioritized improvements in search functionality, user engagement features, analytics, compliance, and SEO. Tackling these areas will significantly improve the app’s coverage of required features, its overall usability, and compliance with best practices and legal standards. Collectively, these changes move the application much closer to the desired targets for functionality and user satisfaction, as well as aligning it with the expectations set out in the scorecard. Each suggestion can be taken as a starting point (“Start task”) for development sprints dedicated to closing these gaps and elevating the platform to a competitive level. The result will be a more feature-complete, user-friendly, and trustworthy real estate application for the Botswana market and beyond.