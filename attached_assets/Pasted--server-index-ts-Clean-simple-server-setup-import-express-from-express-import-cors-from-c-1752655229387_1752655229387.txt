// server/index.ts - Clean, simple server setup
import express from 'express';
import cors from 'cors';
import { DatabaseManager } from './database';
import { createRentalRoutes } from './rental-routes';

const app = express();
const port = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Initialize database
const dbPath = process.env.DB_PATH || './beedab.db';
const db = new DatabaseManager(dbPath);

// Routes
const rentalRoutes = createRentalRoutes(db);
app.use('/api/rentals', rentalRoutes);

// Basic routes
app.get('/api/properties', (req, res) => {
  console.log('Fetching properties...');
  const properties = db.getAllRentals();
  console.log('Properties fetched:', properties.length);
  res.json(properties);
});

app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// Error handling
app.use((err: any, req: any, res: any, next: any) => {
  console.error('Error:', err);
  res.status(500).json({ error: 'Internal server error' });
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nShutting down gracefully...');
  db.close();
  process.exit(0);
});

app.listen(port, () => {
  console.log(`ðŸš€ Server running on port ${port}`);
});

// ----------------------------------------
// server/rental-routes.ts - Clean routes
import express from 'express';
import { DatabaseManager } from './database';

export function createRentalRoutes(db: DatabaseManager): express.Router {
  const router = express.Router();

  // Search rentals
  router.get('/search', (req, res) => {
    try {
      const filters = {
        minPrice: req.query.minPrice ? parseFloat(req.query.minPrice as string) : undefined,
        maxPrice: req.query.maxPrice ? parseFloat(req.query.maxPrice as string) : undefined,
        location: req.query.location as string,
        bedrooms: req.query.bedrooms ? parseInt(req.query.bedrooms as string) : undefined,
        bathrooms: req.query.bathrooms ? parseInt(req.query.bathrooms as string) : undefined,
        garden: req.query.garden !== undefined ? req.query.garden === 'true' : undefined,
        air_conditioning: req.query.air_conditioning !== undefined ? req.query.air_conditioning === 'true' : undefined,
        search: req.query.search as string,
      };

      const rentals = db.searchRentals(filters);
      
      res.json({
        success: true,
        data: rentals,
        count: rentals.length,
        filters: filters
      });
    } catch (error) {
      console.error('Error searching rentals:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to search rentals'
      });
    }
  });

  // Get all rentals
  router.get('/', (req, res) => {
    try {
      const rentals = db.getAllRentals();
      res.json({
        success: true,
        data: rentals,
        count: rentals.length
      });
    } catch (error) {
      console.error('Error fetching rentals:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to fetch rentals'
      });
    }
  });

  // Get rental by ID
  router.get('/:id', (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const rental = db.getRentalById(id);
      
      if (!rental) {
        return res.status(404).json({
          success: false,
          error: 'Rental not found'
        });
      }
      
      res.json({
        success: true,
        data: rental
      });
    } catch (error) {
      console.error('Error fetching rental:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to fetch rental'
      });
    }
  });

  // Create new rental
  router.post('/', (req, res) => {
    try {
      const rental = db.createRental(req.body);
      res.status(201).json({
        success: true,
        data: rental
      });
    } catch (error) {
      console.error('Error creating rental:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to create rental'
      });
    }
  });

  // Update rental
  router.put('/:id', (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const rental = db.updateRental(id, req.body);
      
      if (!rental) {
        return res.status(404).json({
          success: false,
          error: 'Rental not found'
        });
      }
      
      res.json({
        success: true,
        data: rental
      });
    } catch (error) {
      console.error('Error updating rental:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to update rental'
      });
    }
  });

  // Delete rental
  router.delete('/:id', (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const result = db.deleteRental(id);
      
      if (result.changes === 0) {
        return res.status(404).json({
          success: false,
          error: 'Rental not found'
        });
      }
      
      res.json({
        success: true,
        message: 'Rental deleted successfully'
      });
    } catch (error) {
      console.error('Error deleting rental:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to delete rental'
      });
    }
  });

  return router;
}