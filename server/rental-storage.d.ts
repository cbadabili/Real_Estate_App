export interface RentalFilters {
    location?: string;
    city?: string;
    district?: string;
    minPrice?: number;
    maxPrice?: number;
    bedrooms?: number;
    bathrooms?: number;
    property_type?: string;
    furnished?: boolean;
    pets_allowed?: boolean;
    parking_spaces?: number;
    status?: string;
    available_from?: string;
}
export interface RentalApplication {
    id?: number;
    rental_id: number;
    renter_id: number;
    application_data: any;
    status: 'pending' | 'approved' | 'rejected';
    background_check_status?: string;
    credit_report_status?: string;
    created_at?: string;
    updated_at?: string;
}
export declare class RentalStorage {
    getAllRentals(): Promise<{
        id: number;
        landlord_id: number | null;
        title: string;
        description: string;
        address: string;
        city: string;
        district: string;
        ward: string | null;
        property_type: string;
        bedrooms: number;
        bathrooms: number;
        square_meters: number;
        monthly_rent: number;
        deposit_amount: number;
        lease_duration: number;
        available_from: string;
        furnished: boolean | null;
        pets_allowed: boolean | null;
        parking_spaces: number | null;
        photos: unknown;
        amenities: unknown;
        utilities_included: unknown;
        status: string | null;
        created_at: Date | null;
        updated_at: Date | null;
    }[]>;
    getRentalById(id: number): Promise<{
        id: number;
        landlord_id: number | null;
        title: string;
        description: string;
        address: string;
        city: string;
        district: string;
        ward: string | null;
        property_type: string;
        bedrooms: number;
        bathrooms: number;
        square_meters: number;
        monthly_rent: number;
        deposit_amount: number;
        lease_duration: number;
        available_from: string;
        furnished: boolean | null;
        pets_allowed: boolean | null;
        parking_spaces: number | null;
        photos: unknown;
        amenities: unknown;
        utilities_included: unknown;
        status: string | null;
        created_at: Date | null;
        updated_at: Date | null;
    } | null>;
    searchRentals(filters: RentalFilters): Promise<{
        id: number;
        landlord_id: number | null;
        title: string;
        description: string;
        address: string;
        city: string;
        district: string;
        ward: string | null;
        property_type: string;
        bedrooms: number;
        bathrooms: number;
        square_meters: number;
        monthly_rent: number;
        deposit_amount: number;
        lease_duration: number;
        available_from: string;
        furnished: boolean | null;
        pets_allowed: boolean | null;
        parking_spaces: number | null;
        photos: unknown;
        amenities: unknown;
        utilities_included: unknown;
        status: string | null;
        created_at: Date | null;
        updated_at: Date | null;
    }[]>;
    createRental(rentalData: any): Promise<{
        id: number;
        created_at: Date | null;
        updated_at: Date | null;
        title: string;
        description: string;
        address: string;
        city: string;
        property_type: string;
        bedrooms: number;
        bathrooms: number;
        status: string | null;
        landlord_id: number | null;
        district: string;
        ward: string | null;
        square_meters: number;
        monthly_rent: number;
        deposit_amount: number;
        lease_duration: number;
        available_from: string;
        furnished: boolean | null;
        pets_allowed: boolean | null;
        parking_spaces: number | null;
        photos: unknown;
        amenities: unknown;
        utilities_included: unknown;
    }>;
    updateRental(id: number, updates: any): Promise<boolean>;
    deleteRental(id: number): Promise<boolean>;
    getRentalApplications(rentalId: number): Promise<RentalApplication[]>;
    createRentalApplication(applicationData: Omit<RentalApplication, 'id'>): Promise<{
        id: number;
        created_at: Date | null;
        updated_at: Date | null;
        status: string | null;
        rental_id: number | null;
        renter_id: number | null;
        application_data: unknown;
        background_check_status: string | null;
        credit_report_status: string | null;
    }>;
    updateRentalApplicationStatus(id: number, status: string): Promise<boolean>;
    getRentalStats(): Promise<{
        total: number;
        available: number;
        rented: number;
        avgPrice: string | number;
    }>;
}
