name: ZAP Baseline Scan

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  zap:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: beedab
          POSTGRES_USER: beedab
          POSTGRES_PASSWORD: beedab
        options: >-
          --health-cmd "pg_isready -d beedab -U beedab" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      # checkov:skip=CKV_SECRET_4 Ephemeral CI Postgres service credentials
      DATABASE_URL: postgresql://beedab:beedab@localhost:5432/beedab?sslmode=disable
      NODE_ENV: production
      FORCE_DB_MIGRATIONS: 'true'
      FORCE_DB_SEED: 'true'
      PORT: 5000
      PGSSLMODE: disable
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Prepare database
        run: |
          npm run db:push || echo 'drizzle push skipped'
          npm run db:seed || echo 'seed step failed; continuing because app can self-seed'
      - name: Start BeeDab API
        run: |
          nohup npm run start >/tmp/server.log 2>&1 &
          ready=0
          for i in {1..60}; do
            if curl -fsS http://127.0.0.1:5000/api/health >/dev/null; then
              ready=1
              break
            fi
            sleep 2
          done
          if [ "$ready" -ne 1 ]; then
            echo "API failed to start within timeout"
            tail -n 200 /tmp/server.log || true
            exit 1
          fi
      - name: Run ZAP Baseline Scan
        env:
          ZAP_AUTH_HEADER: ${{ secrets.ZAP_AUTH_HEADER }}
          ZAP_AUTH_HEADER_VALUE: ${{ secrets.ZAP_AUTH_HEADER_VALUE }}
          ZAP_AUTH_HEADER_SITE: ${{ secrets.ZAP_AUTH_HEADER_SITE }}
        run: |
          mkdir -p zap-work
          chmod 777 zap-work
          docker run --rm --network host \
            -e ZAP_AUTH_HEADER \
            -e ZAP_AUTH_HEADER_VALUE \
            -e ZAP_AUTH_HEADER_SITE \
            -v "$(pwd)/zap-work":/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://127.0.0.1:5000 -J zap-report.json -w zap-report.md -r zap-report.html -a -j -l High
          cp zap-work/zap-report.* .
      - name: Package ZAP artifacts
        if: always()
        run: |
          zip -j zap-report.zip zap-report.html zap-report.md zap-report.json >/dev/null 2>&1 || true
      - name: Upload ZAP Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.zip
          if-no-files-found: ignore
      - name: Upload server logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-server-log
          path: /tmp/server.log
          if-no-files-found: ignore
